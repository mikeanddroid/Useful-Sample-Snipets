{"name":"Useful-sample-snipets","tagline":"A repo having sample snipets for day to day android development.","body":"\r\n### Authors and Contributors\r\nContributers @mikeanddroid\r\n\r\n# Some Useful Snipets \r\n\r\n### Getting Zip Code from the name of the city or a place \r\n\r\n```\r\n\r\npublic static class GeocoderTask extends AsyncTask<String, Void, String> {\r\n\r\n        private Context context;\r\n\r\n        public GeocoderTask(Context context) {\r\n            this.context = context;\r\n        }\r\n\r\n        @Override\r\n        protected String doInBackground(String... params) {\r\n\r\n            Geocoder geocoder = new Geocoder(context);\r\n\r\n            try {\r\n\r\n                Address address = geocoder.getFromLocationName(params[0], 1).get(0);\r\n                address = geocoder.getFromLocation(address.getLatitude(), address.getLongitude(), 1).get(0);\r\n                return address.getPostalCode();\r\n\r\n            } catch (Exception e) {\r\n                Log.e(TAG, \"Error getting zip for location. \" + e);\r\n                return null;\r\n            }\r\n\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(String s) {\r\n            super.onPostExecute(s);\r\n            Log.d(TAG, \" Got parsed zip : \" + s);\r\n        }\r\n    }\r\n\r\n```\r\n\r\n***\r\n\r\n### Verify Android M Permission\r\n**Utility class that wraps access to the runtime permissions API in M and provides basic helper methods.**\r\n\r\n```\r\npublic static boolean verifyPermissions(int[] grantResults) {\r\n        \r\n// At least one result must be checked.\r\n        if(grantResults.length < 1){\r\n            return false;\r\n        }\r\n\r\n        // Verify that each required permission has been granted, otherwise return false.\r\n        for (int result : grantResults) {\r\n            if (result != PackageManager.PERMISSION_GRANTED) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n```\r\n\r\n***\r\n\r\n### Check for GPS enabled/disabled\r\n\r\n```\r\n   public static boolean isGPSEnabled(final Context context) {\r\n\r\n        LocationManager manager = (LocationManager) context.getSystemService(context.LOCATION_SERVICE);\r\n        \r\n        if (!manager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n```\r\n\r\n***\r\n\r\n### Convert Input Stream to String \r\n\r\n```\r\n    public static String inputStreamToString(InputStream inputStream, String charsetName) throws IOException {\r\n\r\n        StringBuilder builder = new StringBuilder();\r\n        InputStreamReader reader = new InputStreamReader(inputStream, charsetName);\r\n        \r\n        char[] buffer = new char[BUFFER_SIZE];\r\n        int length;\r\n\r\n        while ((length = reader.read(buffer)) != -1) {\r\n            builder.append(buffer, 0, length);\r\n        }\r\n\r\n        return builder.toString();\r\n\r\n    }\r\n\r\n```\r\n\r\n***\r\n\r\n### Check for telephony with the help of reflection\r\n\r\n```\r\npublic static boolean hasTelephony(Activity context) {\r\n        \r\n        boolean hasTelephony;\r\n        try {\r\n            TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\r\n            if (tm == null) {\r\n                hasTelephony = false;\r\n                return hasTelephony;\r\n            }\r\n\r\n            PackageManager pm = context.getPackageManager();\r\n            Method method;\r\n\r\n            Class<?>[] parameters = new Class<?>[1];\r\n            parameters[0] = String.class;\r\n            method = pm.getClass().getMethod(\"hasSystemFeature\", parameters);\r\n            Object[] parm = new Object[1];\r\n            parm[0] = PackageManager.FEATURE_TELEPHONY;\r\n            Object retValue = method.invoke(pm, parm);\r\n            if (retValue instanceof Boolean) {\r\n                hasTelephony = (Boolean) retValue;\r\n            } else {\r\n                hasTelephony = false;\r\n            }\r\n        } catch (Exception e) {\r\n            Log.e(\"HasTelephony\", \"Exception hasTelephony = false \" + e);\r\n            hasTelephony = false;\r\n        }\r\n\r\n        return hasTelephony;\r\n    }\r\n\r\n```\r\n\r\n***\r\n\r\n### Get Typeface-Used when you want to set a custom typeface to your Text fonts \r\n\r\n```\r\n    public static Typeface your_Method_Name(Context context) {\r\n\r\n        Typeface  someTypeface;\r\n\r\n        AssetManager mgr = context.getAssets();\r\n        someTypeface = Typeface.createFromAsset(mgr, \"fonts/your_font.ttf\");\r\n\r\n        return someTypeface;\r\n\r\n    }\r\n\r\n```\r\n\r\n***\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}